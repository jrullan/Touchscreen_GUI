Todo 2015-05-17:
1. Check if Numkey can use same setEventHandler instead of setNumkeyEventHandler

Todo 2015-04-28:
1. Canvas - Refactor the touchWidgets method into the scan method. Don't remember why they are separated.

===DONE===
2. Fix the mutual includes issue between Canvas and Widget to include a pointer to the Canvas inside every Widget
so that a Widget may call a Canvas method. For example the Numkey might call Canvas to remove it if it finished.
	1- Forward declarations fixed the includes issues
	2- Calling eventhandler() in Numkey and then calling canvas->pop() afterwards crashes the program and it restarts from
		the beginning.
			i) Ahhjaaaa! - If I delete the numkey object, no one is recreating the object since initialization code only occurs
				once in the lifetime of the program in the setup() routine.
			ii) AHHHHJAAAA!!!! - It was crashing because I forgot to set the Widget's myCanvas variable in the canvas.add method.

===DONE===
3. Widgets collection - Reimplement based on a linked list or array list to be able to remove any item, to support
	the Numkey pop-up functionality.
	1- Need to update the following methods
		Canvas::add()
		Canvas::remove()
		Canvas::pop()
		Canvas::touchWidgets()
		Canvas::redraw()
		
		Note: Decided to stay with StackArray because the linked list is innefficient when accesing the last element pushed in
		according to the documentation from IvanSeigel LinkedList library. Since most of the time, the pop-up element will be 
		added at the end during runtime, it will be the last element. The stack pops up the last element first, so it is 
		much more efficient finding the last element. 
		Maybe I just need to find a way to handle several pop-up's or to force pop() before pushing any new "pop-up-able" 
		element during runtime. Hmmm...
		
		Another note: Since the widgets are declared and defined during setup(), they shouldn't really be deleted during runtime.
		This simplifies handling them.
		
===DONE===		
4. Numkey - Add a bool variable to set the mode of operation:
	Mode Pop-Up: call myCanvas.remove() to remove it from the collection
	Mode Normal: don't call myCanvas.remove()
	

Todo 2015-04-06:


===DONE===
1. Create new class: Indicator
This class will be the parent class of Dial and Gauge classes. It will 
refactor these classes operations and attributes to minimize the
duplicate methods and attributes.
	Methods:
		1. getCV   x
		2. setCV   x
		3. show    x
		4. checkTouch  x
		5. setLimits   x
		6. setHiLimit  x
		7. setLowLimit x
		8. clear	 x
		9. init		 x
		10. update x
	Attributes:
		1. hiLimit  x
		2. lowLimit  x
		3. hiLimitColor  x
		4. lowLimitColor  x
		5. setpoint  x
		6. currentValue  x
		7. previousValue x
======
Notes:
Previous approach memory statistics:
Program Storage: 22,222 bytes
Dynamic memory (Global Variables): 732 bytes

New Approach (inheriting from Indicator):
Program Storage: 22,200 bytes										22 bytes less  :)
Dynamic memory (Global Variables): 750 bytes		18 bytes more! :(

	
2. Eliminate the isButton method from the Widget class and replace by a public attribute
isButton.

3. Use the scope resolution operator :: to access the parent method
and then extend the method in the child class by including additional 
and specific code.
	Example:
	
	class Indicator{
		
		void init(){
			...
		}
	}
	
	
	class Dial: public Indicator{
	
		void init(){
			Indicator::init();
			...//additional code
		}
	}

4. Refactor: Canvas.pop() to remove the Numkey. If I can find a way to call a Numkey.close() method instead
it will be better for usability and to prevent popping other controls accidentally.
This will require a way for the Numkey widget to get a pointer to it's canvas.
